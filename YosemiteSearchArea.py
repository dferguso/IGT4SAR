# ---------------------------------------------------------------------------
# TheoreticalSearchArea.py
# Author: Don Ferguson
# Created on: 2012-01-25 10:55:47.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Test <DEM> <Planning_Point>
# Description:
# ---------------------------------------------------------------------------
# Import arcpy module
import arcpy
import arcpy.mapping
from arcpy import env
from arcpy.sa import *

# Check out any necessary licenses
arcpy.CheckOutExtension("Spatial")

# Script arguments
env.overwriteOutput = "True"
arcpy.env.extent = "MAXOF"

mxd = arcpy.mapping.MapDocument("CURRENT")
df=arcpy.mapping.ListDataFrames(mxd,"*")[0]

# Script arguments
##wrkspc = arcpy.GetParameterAsText(0)  # Get the subject number
wrkspc = "G:\GISData\Searches\Test_YOSAR\SAR_Default.gdb"

env.workspace = wrkspc

fl1 = arcpy.GetParameterAsText(0)  # Get the subject number

#fl2 = "YOSAR_Located_2000to2010"
fl2 = "Find"
fc3="IPP_Test"

##DEM2 = arcpy.GetParameterAsText(2)
DEM2 = "14 Base_Data_Group\Elevation\yosemitedem"
if DEM2 == '#' or not DEM2:
    DEM2 = "DEM" # provide a default value if unspecified

# Local variables:

##Travspd_spm = "TravSpd_spm"
Travspd_spm = "TravSpd_50slp"
PthDis_travsp = "PthDis_travsp"
blnk_travsppd = "blnk_travsppd"
Travspd_kph = "TravSpd_kph"
TravTime_hrs = "TravTime_hrs"
travtimhr_rcl = "Travtimhr_rcl"
fl1_Buff = "G:/GISData/Searches/Test_YOSAR/Analysis/fl1_Buff"
fl1_Buff = "fl1_Buff"
Trav_Clip = "Trav_Clip"
DEM_Clip = "DEM_Clip"
Trav_Re = "Trav_Re"
sName = "Time_Raster"

##TimeTable = "C:\MapSAR_Ex\Template\SAR_Default.gdb\TimeTable"
TimeTable = "TimeTable"


arcpy.env.cellSize = DEM2

XCel = arcpy.GetRasterProperties_management(DEM2,"CELLSIZEX")
XCell = float(XCel.getOutput(0))
cellSize = XCell

dList = []
cName =[]
############################
##desc = arcpy.Describe(fl1)
##fc1 = desc.dataElement.catalogPath
pCase = [20000083,20000327,20000372,20000373,20000942,20001009,20001416,20001433,20001505,20001719,20001896,20002011,20002715,20002764,20003134,20003454,20003662,20003861,20010092,20010852,20011298,20011458,20011968,20012531,20012670,20020367,20020467,20020983,20021127,20021197,20021621,20022605,20022977,20023667,20030346,20030550,20031175,20031696,20031821,20031868,20032207,20033063,20033143,20033240,20033679,20033854,20034058,20040231,20040633,20041002,20041652,20041661,20041708,20041840,20041880,20042012,20043082,20043237,20043902,20043928,20043987,20050226,20050337,20050375,20050414,20051044,20051058,20051108,20051614,20052170,20052281,20052555,20052608,20053869,20053916,20053965,20053979,20054089,20054956,20060360,20060587,20061357,20061717,20062031,20062046,20062337,20062347,20062805,20063212,20063924,20064539,20064938,20064940,20070410,20070559,20070616,20070773,20070916,20071026,20071057,20071199,20071201,20071376,20071873,20072749,20072917,20073179,20073587,20074148,20074225,20074316,20074355,20075187,20080291,20080603,20080696,20081012,20081237,20081577,20081746,20082040,20083153,20084101,20084520,20085029,20090248,20090652,20091134,20091252,20091345,20091382,20091583,20091755,20091760,20091889,20091915,20092078,20092164,20092642,20092667,20092960,20093105,20093168,20093531,20094036,20094115,20094603,20095006,20095011,20100375,20100765,20101824,20101842,20102047,20102498,20102587,20102786,20103096,20103130,20103475,20103621,20104030,20104115,20104201]

##for jj in len(pCase):
CaseNum = 20093725
##CaseNum = pCase(jj-1)
where1 = '"CaseNumber" = ' + str(CaseNum)
##where1 = '"Length_" < 35000'
arcpy.SelectLayerByAttribute_management(fl1, "NEW_SELECTION", where1)
##arcpy.SelectLayerByAttribute_management(fl1, "REMOVE_FROM_SELECTION")
rows = arcpy.SearchCursor(fl1)

for row in rows:
    arcpy.Compact_management(wrkspc)
##    arcpy.RefreshActiveView()
    arcpy.env.extent = fl1
    # you need to insert correct field names in your getvalue function
    pLength = 0.0
    pLength = row.getValue("Length_")
    if pLength < 35000:
        if pLength < 500:
            fLength = 1000
        elif pLength < 2000:
            fLength = 2400.0
        else:
            fLength = pLength * 1.2
##      fLength = 18.5 * 1620.0
        CaseNum = row.getValue("CaseNumber")
        where2 = '"CaseNumber" = ' + str(CaseNum)
        arcpy.SelectLayerByAttribute_management(fl1, "NEW_SELECTION", where2)
        arcpy.CopyFeatures_management(fl1, fc3)

##        df.zoomToSelectedFeatures()

        ##arcpy.AddMessage("Buffer point")
        arcpy.Buffer_analysis(fc3, fl1_Buff, fLength,"FULL","","","")
        flBuff_Layer=arcpy.mapping.Layer(fl1_Buff)
        arcpy.mapping.AddLayer(df,flBuff_Layer,"BOTTOM")

        ##arcpy.AddMessage("Clip DEM to prescribed distance")
        ########################
        arcpy.Clip_management(DEM2, "#", DEM_Clip, fl1_Buff, "", "ClippingGeometry")
        ##DEM_Clip = DEM2
        ########################
        DEMClip_Layer=arcpy.mapping.Layer(DEM_Clip)
        arcpy.mapping.AddLayer(df,DEMClip_Layer,"BOTTOM")

        arcpy.env.extent = fl1_Buff

        arcpy.Clip_management(Travspd_spm, "#", Trav_Clip, fl1_Buff, "", "ClippingGeometry")
        ##DEM_Clip = DEM2
        ########################
        TravClip_Layer=arcpy.mapping.Layer(Trav_Clip)
        arcpy.mapping.AddLayer(df,TravClip_Layer,"BOTTOM")


        InVertFact = 'VfTable("C:\MapSAR_Ex\Tools\Tables\Tobler.txt")'
##        outPathDist = PathDistance(fc3, TravClip_Layer, DEMClip_Layer, "", "BINARY 1 45", "", "BINARY 1 -45 45", "", "")
        outPathDist = PathDistance(fc3, TravClip_Layer, DEMClip_Layer, "", "BINARY 1 45", "", InVertFact, "", blnk_travsppd)
        outPathDist.save(PthDis_travsp)
        del outPathDist

        outDivide = Raster(PthDis_travsp)/3600.0*10.0
        outDivide.save(TravTime_hrs)
        del outDivide
        ##arcpy.AddMessage("Reclassify Travel Time - hrs")
        # Execute Reclassify
        # The output from Reclassification is multiplied by 10 to allow for 1/2 hour
        # increments with integer math.  Thus 5 = 0.5 hours.  Correction will be made below.
        outRaster = ReclassByTable(TravTime_hrs, TimeTable , "FROM_","TO","OUT","NODATA")
        # Save the output

        outRaster.save(Trav_Re)
        del outRaster

        outSpeed = Raster(Trav_Re)/10.0
        pName = "C" + str(CaseNum)
        gName = pName
##        gName = sName
        outSpeed.save(gName)
        del outSpeed

##        cDist=arcpy.mapping.Layer(name)
##        arcpy.mapping.AddLayer(df,cDist,"BOTTOM")


        arcpy.SelectLayerByAttribute_management(fl2, "NEW_SELECTION", where2)

        outTable = "Sample"
        sampMethod = "NEAREST"

        # Execute Sample
        Sample(gName, fl2, outTable, sampMethod)
        rows2 = arcpy.SearchCursor(outTable)
        for row2 in rows2:
            desc = arcpy.Describe(gName)
            sCheck = desc.name
            case =row2.getValue(sCheck)
            ##arcpy.AddMessage(str(CaseNum))
            arcpy.AddMessage("case Num: " + str(CaseNum) + "   Hours: " + str(case) + "   Distance: " + str(pLength))
            dList.append(str(case))
            cName.append(str(CaseNum))

        del row2
        del rows2
        fcLayer=["Trav_Clip", "DEM_Clip","fl1_Buff"]

        for lyr in fcLayer:
            for ii in arcpy.mapping.ListLayers(mxd, lyr):
                try:
                    print "Deleting layer", ii
                    arcpy.mapping.RemoveLayer(df , ii)
                except:
                    pass

        arcpy.DeleteFeatures_management(fc3)
        #arcpy.Delete_management(wrkspc + '\\' + fl3)
        arcpy.Delete_management(wrkspc + '\\' + DEM_Clip)
        arcpy.Delete_management(wrkspc + '\\' + Trav_Clip)
        arcpy.Delete_management(wrkspc + '\\' + fl1_Buff)
        arcpy.Delete_management(wrkspc + '\\' + Trav_Re)
        arcpy.Delete_management(wrkspc + '\\' + PthDis_travsp)
        arcpy.Delete_management(wrkspc + '\\' + TravTime_hrs)
##        arcpy.Delete_management(wrkspc + '\\' + sName)
        arcpy.Delete_management(wrkspc + '\\' + outTable)

del rows
del row




